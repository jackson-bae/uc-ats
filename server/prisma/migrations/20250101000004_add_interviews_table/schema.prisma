generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(uuid())
  email            String     @unique
  password         String     // Will be hashed
  fullName         String
  graduationClass  String?
  profileImage     String?
  role             UserRole   @default(USER)
  createdAt        DateTime   @default(now())
  resetToken       String? 
  resetTokenExpiry DateTime?

  @@map("users")

  comments         Comment[]
  resumeScores     ResumeScore[]
  coverLetterScores CoverLetterScore[]
  videoScores      VideoScore[]
  evaluations      Evaluation[]
  
  // Group member relations
  memberOneGroups     Groups[] @relation("GroupMemberOne")
  memberTwoGroups     Groups[] @relation("GroupMemberTwo")
  memberThreeGroups   Groups[] @relation("GroupMemberThree")
}

enum UserRole {
  USER
  ADMIN
  MEMBER
}

model Candidate {
  id                String   @id @default(uuid())
  studentId         Int      @unique
  firstName         String
  lastName          String
  email             String   @unique
  assignedGroupId   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  applications      Application[]
  resumeScores      ResumeScore[]
  coverLetterScores CoverLetterScore[]
  videoScores       VideoScore[]
  eventRsvp         EventRsvp[]
  eventAttendance   EventAttendance[]
  coffeeChat        CoffeeChat[]
  roundOne          RoundOne[]
  roundTwo          RoundTwo[]
  referrals         Referral[]
  
  // Group assignment relation
  assignedGroup     Groups? @relation(fields: [assignedGroupId], references: [id])

  @@map("candidates")
}

model Application {
  id                    String              @id @default(uuid())
  status                ApplicationStatus   @default(SUBMITTED)

  responseID            String              @unique
  submittedAt           DateTime            @default(now())

  email                 String              
  firstName             String
  lastName              String
  studentId             String              
  phoneNumber           String

  graduationYear        String
  isTransferStudent     Boolean
  priorCollegeYears     String?
  cumulativeGpa         Decimal            @db.Decimal(3,2)
  majorGpa              Decimal            @db.Decimal(3,2)
  major1                String
  major2                String?

  gender                String?
  isFirstGeneration     Boolean

  resumeUrl             String             
  blindResumeUrl        String?             
  headshotUrl           String             
  coverLetterUrl        String?             
  videoUrl              String?             

  rawResponses          Json

  // Relations
  candidateId           String
  candidate             Candidate           @relation(fields: [candidateId], references: [id])
  cycleId               String
  cycle                 RecruitingCycle     @relation(fields: [cycleId], references: [id])
  grades                Grade[]
  comments              Comment[]

  @@map("applications")
}

enum ApplicationStatus {
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  WAITLISTED
}

model RecruitingCycle {
  id        String   @id @default(uuid())
  name      String
  formUrl   String?
  startDate DateTime?
  endDate   DateTime?
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  applications Application[]
  events      Events[]
  interviews  Interview[]

  @@map("recruiting_cycles")
}

model Interview {
  id            String   @id @default(uuid())
  name          String
  type          String   // COFFEE_CHAT, ROUND_ONE, ROUND_TWO
  startDate     DateTime
  endDate       DateTime
  location      String?
  maxCandidates Int?
  description   String?
  cycleId       String
  cycle         RecruitingCycle @relation(fields: [cycleId], references: [id])
  createdAt     DateTime @default(now())

  @@map("interviews")
}

model Grade {
  id            String    @id @default(uuid())
  overallScore  Decimal   @db.Decimal(5,2)
  scoreOne      Int?
  scoreTwo      Int?
  scoreThree    Int?
  notesOne      String?
  notesTwo      String?
  notesThree    String?
  adminScore    Decimal?  @db.Decimal(5,2)
  adminNotes    String?
  status        String?
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
  evaluatorId   String?
  evaluator     User?     @relation(fields: [evaluatorId], references: [id])
  assignedGroupId String?
  assignedGroup Groups?   @relation(fields: [assignedGroupId], references: [id])
  createdAt     DateTime  @default(now())

  @@map("grades")
}

model Comment {
  id            String    @id @default(uuid())
  content       String
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  createdAt     DateTime  @default(now())

  @@map("comments")
}

model Groups {
  id            String    @id @default(uuid())
  name          String
  memberOne     String?
  memberTwo     String?
  memberThree   String?
  createdAt     DateTime  @default(now())

  // Member relations
  memberOneUser   User?     @relation("GroupMemberOne", fields: [memberOne], references: [id])
  memberTwoUser   User?     @relation("GroupMemberTwo", fields: [memberTwo], references: [id])
  memberThreeUser User?     @relation("GroupMemberThree", fields: [memberThree], references: [id])

  // Relations to scoring models
  resumeScores     ResumeScore[]
  coverLetterScores CoverLetterScore[]
  videoScores      VideoScore[]

  // Assigned candidates relation
  assignedCandidates Candidate[]

  @@map("groups")
}

model ResumeScore {
  id            String    @id @default(uuid())
  overallScore  Decimal   @db.Decimal(5,2)
  scoreOne      Int?
  scoreTwo      Int?
  scoreThree    Int?
  notesOne      String?
  notesTwo      String?
  notesThree    String?
  adminScore    Decimal?  @db.Decimal(5,2)
  adminNotes    String?
  status        String?
  candidateId   String
  candidate     Candidate @relation(fields: [candidateId], references: [id])
  evaluatorId   String?
  evaluator     User?     @relation(fields: [evaluatorId], references: [id])
  assignedGroupId String?
  assignedGroup Groups?   @relation(fields: [assignedGroupId], references: [id])
  createdAt     DateTime  @default(now())

  @@map("resume_scores")
}

model CoverLetterScore {
  id            String    @id @default(uuid())
  overallScore  Decimal   @db.Decimal(5,2)
  scoreOne      Int?
  scoreTwo      Int?
  scoreThree    Int?
  notesOne      String?
  notesTwo      String?
  notesThree    String?
  adminScore    Decimal?  @db.Decimal(5,2)
  adminNotes    String?
  status        String?
  candidateId   String
  candidate     Candidate @relation(fields: [candidateId], references: [id])
  evaluatorId   String?
  evaluator     User?     @relation(fields: [evaluatorId], references: [id])
  assignedGroupId String?
  assignedGroup Groups?   @relation(fields: [assignedGroupId], references: [id])
  createdAt     DateTime  @default(now())

  @@map("cover_letter_scores")
}

model VideoScore {
  id            String    @id @default(uuid())
  overallScore  Decimal   @db.Decimal(5,2)
  scoreOne      Int?
  scoreTwo      Int?
  scoreThree    Int?
  notesOne      String?
  notesTwo      String?
  notesThree    String?
  adminScore    Decimal?  @db.Decimal(5,2)
  adminNotes    String?
  status        String?
  candidateId   String
  candidate     Candidate @relation(fields: [candidateId], references: [id])
  evaluatorId   String?
  evaluator     User?     @relation(fields: [evaluatorId], references: [id])
  assignedGroupId String?
  assignedGroup Groups?   @relation(fields: [assignedGroupId], references: [id])
  createdAt     DateTime  @default(now())

  @@map("video_scores")
}

model Events {
  id              String    @id @default(uuid())
  eventName       String
  eventStartDate  DateTime
  eventEndDate    DateTime
  eventLocation   String?
  rsvpForm        String?
  attendanceForm  String?
  cycleId         String
  cycle           RecruitingCycle @relation(fields: [cycleId], references: [id])
  createdAt       DateTime  @default(now())

  // Relations
  eventRsvp       EventRsvp[]
  eventAttendance EventAttendance[]

  @@map("events")
}

model EventRsvp {
  id          String    @id @default(uuid())
  responseId  String    @unique
  eventId     String
  event       Events    @relation(fields: [eventId], references: [id])
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  createdAt   DateTime  @default(now())

  @@map("event_rsvp")
}

model EventAttendance {
  id          String    @id @default(uuid())
  responseId  String    @unique
  eventId     String
  event       Events    @relation(fields: [eventId], references: [id])
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  createdAt   DateTime  @default(now())

  @@map("event_attendance")
}

model CoffeeChat {
  id            String    @id @default(uuid())
  mentorName    String
  scheduledAt   DateTime
  completed     Boolean   @default(false)
  overallScore  Decimal?  @db.Decimal(5,2)
  candidateId   String
  candidate     Candidate @relation(fields: [candidateId], references: [id])
  evaluations   Evaluation[]
  createdAt     DateTime  @default(now())

  @@map("coffee_chat")
}

model RoundOne {
  id            String    @id @default(uuid())
  status        String    // "passed", "failed", "pending"
  feedback      String?
  overallScore  Decimal?  @db.Decimal(5,2)
  candidateId   String
  candidate     Candidate @relation(fields: [candidateId], references: [id])
  evaluations   Evaluation[]
  createdAt     DateTime  @default(now())

  @@map("round_one")
}

model RoundTwo {
  id            String    @id @default(uuid())
  status        String    // "passed", "failed", "pending"
  feedback      String?
  overallScore  Decimal?  @db.Decimal(5,2)
  candidateId   String
  candidate     Candidate @relation(fields: [candidateId], references: [id])
  evaluations   Evaluation[]
  createdAt     DateTime  @default(now())

  @@map("round_two")
}

model Referral {
  id            String    @id @default(uuid())
  referrerName  String
  relationship  String
  candidateId   String
  candidate     Candidate @relation(fields: [candidateId], references: [id])
  createdAt     DateTime  @default(now())

  @@map("referrals")
}

model Evaluation {
  id            String    @id @default(uuid())
  score         Decimal   @db.Decimal(5,2)
  feedback      String?
  coffeeChatId  String?
  coffeeChat    CoffeeChat? @relation(fields: [coffeeChatId], references: [id])
  roundOneId    String?
  roundOne      RoundOne? @relation(fields: [roundOneId], references: [id])
  roundTwoId    String?
  roundTwo      RoundTwo? @relation(fields: [roundTwoId], references: [id])
  evaluatorId   String
  evaluator     User      @relation(fields: [evaluatorId], references: [id])
  createdAt     DateTime  @default(now())

  @@map("evaluations")
}
