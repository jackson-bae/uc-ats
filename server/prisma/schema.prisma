generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(uuid())
  email            String     @unique
  password         String     // Will be hashed
  fullName         String
  graduationClass  String?
  role             UserRole   @default(USER)
  createdAt        DateTime   @default(now())
  resetToken       String? 
  resetTokenExpiry DateTime?

  @@map("users")

  comments         Comment[]
}

enum UserRole {
  USER
  ADMIN
}

model Application {
  id                    String              @id @default(uuid())
  status                ApplicationStatus   @default(SUBMITTED)

  responseID            String              @unique
  submittedAt           DateTime            @default(now())

  email                 String              
  firstName             String
  lastName              String
  studentId             String              
  phoneNumber           String

  graduationYear        String
  isTransferStudent     Boolean
  priorCollegeYears     String?
  cumulativeGpa         Decimal            @db.Decimal(3,2)
  majorGpa              Decimal            @db.Decimal(3,2)
  major1                String
  major2                String?

  gender                String?
  isFirstGeneration     Boolean

  resumeUrl             String             
  blindResumeUrl        String?             
  headshotUrl           String             
  coverLetterUrl        String?             
  videoUrl              String?             

  rawResponses          Json

  @@map("applications")

  approved              Boolean?
  currentRound          String?

  // Recruiting cycle relation
  cycleId               String?
  cycle                 RecruitingCycle?    @relation(fields: [cycleId], references: [id])

  comments              Comment[]
}

enum ApplicationStatus {
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  WAITLISTED
}

model RecruitingCycle {
  id         String   @id @default(uuid())
  name       String
  formUrl    String?
  isActive   Boolean  @default(false)
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime @default(now())

  applications Application[]

  @@map("recruiting_cycles")
}

model Comment {
  id            String       @id @default(uuid())
  applicationId String
  application   Application  @relation(fields: [applicationId], references: [id])
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  content       String
  createdAt     DateTime     @default(now())

  @@map("comments")
}


model Grade {
  id            String   @id @default(uuid())
  resume        String?
  video         String?
  createdAt     DateTime @default(now())
  cover_letter  String?

  applicant   String?
  user        String?

  @@map("grades")

}