generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  password             String
  fullName             String
  graduationClass      String?
  role                 UserRole              @default(USER)
  createdAt            DateTime              @default(now())
  resetToken           String?
  resetTokenExpiry     DateTime?
  profileImage         String?
  studentId            String?
  comments             Comment[]
  coverLetterScores    CoverLetterScore[]
  evaluations          Evaluation[]
  memberOneGroups      Groups[]              @relation("GroupMemberOne")
  memberThreeGroups    Groups[]              @relation("GroupMemberThree")
  memberTwoGroups      Groups[]              @relation("GroupMemberTwo")
  completedActionItems InterviewActionItem[] @relation("InterviewActionItemCompletion")
  interviewAssignments InterviewAssignment[] @relation("InterviewAssignment")
  interviewEvaluations InterviewEvaluation[] @relation("InterviewEvaluator")
  firstRoundEvaluations FirstRoundInterviewEvaluation[] @relation("FirstRoundEvaluator")
  interviewResources   InterviewResource[]
  createdInterviews    Interview[]           @relation("InterviewCreator")
  resumeScores         ResumeScore[]
  videoScores          VideoScore[]
  flaggedDocuments     FlaggedDocument[]     @relation("DocumentFlagger")
  resolvedDocuments    FlaggedDocument[]     @relation("DocumentResolver")
  meetingSlots         MeetingSlot[]
  memberEventRsvp      MemberEventRsvp[]

  @@map("users")
}

model Candidate {
  id                String             @id @default(uuid())
  studentId         String             @unique
  firstName         String
  lastName          String
  email             String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  assignedGroupId   String?
  applications      Application[]
  assignedGroup     Groups?            @relation(fields: [assignedGroupId], references: [id])
  coffeeChat        CoffeeChat[]
  coverLetterScores CoverLetterScore[]
  eventAttendance   EventAttendance[]
  eventRsvp         EventRsvp[]
  referrals         Referral[]
  resumeScores      ResumeScore[]
  roundOne          RoundOne[]
  roundTwo          RoundTwo[]
  videoScores       VideoScore[]

  @@map("candidates")
}

model Application {
  id                   String                @id @default(uuid())
  status               ApplicationStatus     @default(SUBMITTED)
  responseID           String                @unique
  submittedAt          DateTime              @default(now())
  email                String
  firstName            String
  lastName             String
  studentId            String
  phoneNumber          String
  graduationYear       String
  isTransferStudent    Boolean
  priorCollegeYears    String?
  cumulativeGpa        Decimal               @db.Decimal(3, 2)
  majorGpa             Decimal               @db.Decimal(3, 2)
  major1               String
  major2               String?
  gender               String?
  isFirstGeneration    Boolean
  resumeUrl            String
  blindResumeUrl       String?
  headshotUrl          String
  coverLetterUrl       String?
  videoUrl             String?
  rawResponses         Json
  approved             Boolean?
  currentRound         String?
  cycleId              String?
  candidateId          String?
  candidate            Candidate?            @relation(fields: [candidateId], references: [id])
  cycle                RecruitingCycle?      @relation(fields: [cycleId], references: [id])
  comments             Comment[]
  interviewEvaluations InterviewEvaluation[]
  firstRoundEvaluations FirstRoundInterviewEvaluation[]
  flaggedDocuments     FlaggedDocument[]

  @@map("applications")
}

model RecruitingCycle {
  id           String        @id @default(uuid())
  name         String
  isActive     Boolean       @default(false)
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime      @default(now())
  formUrl      String?
  applications Application[]
  events       Events[]
  groups       Groups[]
  interviews   Interview[]
  resumeScores ResumeScore[]

  @@map("recruiting_cycles")
}

model Comment {
  id            String      @id @default(uuid())
  applicationId String
  userId        String
  content       String
  createdAt     DateTime    @default(now())
  application   Application @relation(fields: [applicationId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Grade {
  id           String   @id @default(uuid())
  resume       String?
  video        String?
  createdAt    DateTime @default(now())
  cover_letter String?
  applicant    String?
  user         String?

  @@map("grades")
}

model Evaluation {
  id           String      @id @default(uuid())
  notes        String?
  score        Int
  evaluatorId  String
  createdAt    DateTime    @default(now())
  coffeeChatId String?
  roundOneId   String?
  roundTwoId   String?
  coffeeChat   CoffeeChat? @relation(fields: [coffeeChatId], references: [id])
  evaluator    User        @relation(fields: [evaluatorId], references: [id])
  roundOne     RoundOne?   @relation(fields: [roundOneId], references: [id])
  roundTwo     RoundTwo?   @relation(fields: [roundTwoId], references: [id])

  @@map("evaluations")
}

model Groups {
  id                 String             @id @default(uuid())
  memberOne          String?
  memberTwo          String?
  memberThree        String?
  avgScore           Decimal?           @db.Decimal(5, 2)
  cycleId            String
  createdAt          DateTime           @default(now())
  assignedCandidates Candidate[]
  coverLetterScores  CoverLetterScore[]
  cycle              RecruitingCycle    @relation(fields: [cycleId], references: [id])
  memberOneUser      User?              @relation("GroupMemberOne", fields: [memberOne], references: [id])
  memberThreeUser    User?              @relation("GroupMemberThree", fields: [memberThree], references: [id])
  memberTwoUser      User?              @relation("GroupMemberTwo", fields: [memberTwo], references: [id])
  resumeScores       ResumeScore[]
  videoScores        VideoScore[]

  @@map("groups")
}

model ResumeScore {
  id              String           @id @default(uuid())
  overallScore    Decimal          @db.Decimal(5, 2)
  scoreOne        Int?
  scoreTwo        Int?
  scoreThree      Int?
  adminScore      Decimal?         @db.Decimal(5, 2)
  adminNotes      String?
  status          String?
  candidateId     String
  evaluatorId     String
  assignedGroupId String?
  createdAt       DateTime         @default(now())
  cycleId         String?
  notes           String?
  assignedGroup   Groups?          @relation(fields: [assignedGroupId], references: [id])
  candidate       Candidate        @relation(fields: [candidateId], references: [id])
  cycle           RecruitingCycle? @relation(fields: [cycleId], references: [id])
  evaluator       User             @relation(fields: [evaluatorId], references: [id])

  @@unique([candidateId, evaluatorId])
  @@map("resume_scores")
}

model CoverLetterScore {
  id              String    @id @default(uuid())
  overallScore    Decimal   @db.Decimal(5, 2)
  scoreOne        Int?
  scoreTwo        Int?
  scoreThree      Int?
  notesOne        String?
  notesTwo        String?
  notesThree      String?
  adminScore      Decimal?  @db.Decimal(5, 2)
  adminNotes      String?
  status          String?
  candidateId     String
  evaluatorId     String?
  assignedGroupId String?
  createdAt       DateTime  @default(now())
  assignedGroup   Groups?   @relation(fields: [assignedGroupId], references: [id])
  candidate       Candidate @relation(fields: [candidateId], references: [id])
  evaluator       User?     @relation(fields: [evaluatorId], references: [id])

  @@map("cover_letter_scores")
}

model VideoScore {
  id              String    @id @default(uuid())
  overallScore    Decimal   @db.Decimal(5, 2)
  scoreOne        Int?
  scoreTwo        Int?
  scoreThree      Int?
  notesOne        String?
  notesTwo        String?
  notesThree      String?
  adminScore      Decimal?  @db.Decimal(5, 2)
  adminNotes      String?
  status          String?
  candidateId     String
  evaluatorId     String?
  assignedGroupId String?
  createdAt       DateTime  @default(now())
  assignedGroup   Groups?   @relation(fields: [assignedGroupId], references: [id])
  candidate       Candidate @relation(fields: [candidateId], references: [id])
  evaluator       User?     @relation(fields: [evaluatorId], references: [id])

  @@map("video_scores")
}

model Events {
  id               String            @id @default(uuid())
  eventName        String
  eventStartDate   DateTime
  eventEndDate     DateTime
  eventLocation    String?
  rsvpForm         String?
  attendanceForm   String?
  cycleId          String
  createdAt        DateTime          @default(now())
  memberRsvpUrl    String?
  showToCandidates Boolean           @default(false)
  eventAttendance  EventAttendance[]
  eventRsvp        EventRsvp[]
  memberEventRsvp  MemberEventRsvp[]
  cycle            RecruitingCycle   @relation(fields: [cycleId], references: [id])

  @@map("events")
}

model EventRsvp {
  id          String    @id @default(uuid())
  responseId  String    @unique
  eventId     String
  candidateId String
  createdAt   DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  event       Events    @relation(fields: [eventId], references: [id])

  @@map("event_rsvp")
}

model EventAttendance {
  id          String    @id @default(uuid())
  responseId  String    @unique
  eventId     String
  candidateId String
  createdAt   DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  event       Events    @relation(fields: [eventId], references: [id])

  @@map("event_attendance")
}

model MemberEventRsvp {
  id          String    @id @default(uuid())
  responseId  String    @unique
  eventId     String
  memberId    String
  createdAt   DateTime  @default(now())
  member      User      @relation(fields: [memberId], references: [id])
  event       Events    @relation(fields: [eventId], references: [id])

  @@map("member_event_rsvp")
}

model CoffeeChat {
  id           String       @id @default(uuid())
  mentorName   String
  scheduledAt  DateTime
  completed    Boolean      @default(false)
  overallScore Decimal?     @db.Decimal(5, 2)
  candidateId  String
  createdAt    DateTime     @default(now())
  candidate    Candidate    @relation(fields: [candidateId], references: [id])
  evaluations  Evaluation[]

  @@map("coffee_chat")
}

model RoundOne {
  id           String       @id @default(uuid())
  status       String
  feedback     String?
  overallScore Decimal?     @db.Decimal(5, 2)
  candidateId  String
  createdAt    DateTime     @default(now())
  evaluations  Evaluation[]
  candidate    Candidate    @relation(fields: [candidateId], references: [id])

  @@map("round_one")
}

model RoundTwo {
  id           String       @id @default(uuid())
  status       String
  feedback     String?
  overallScore Decimal?     @db.Decimal(5, 2)
  candidateId  String
  createdAt    DateTime     @default(now())
  evaluations  Evaluation[]
  candidate    Candidate    @relation(fields: [candidateId], references: [id])

  @@map("round_two")
}

model Referral {
  id           String    @id @default(uuid())
  referrerName String
  relationship String
  candidateId  String
  createdAt    DateTime  @default(now())
  candidate    Candidate @relation(fields: [candidateId], references: [id])

  @@map("referrals")
}

model InterviewResource {
  id              String   @id @default(uuid())
  title           String
  description     String?
  url             String?
  fileUrl         String?
  type            String?
  category        String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String
  hasExternalLink Boolean  @default(true)
  icon            String   @default("book")
  order           Int      @default(0)
  round           String
  user            User     @relation(fields: [createdBy], references: [id])

  @@map("interview_resources")
}

model Interview {
  id                 String                @id @default(uuid())
  title              String
  description        String?
  interviewType      InterviewType
  startDate          DateTime
  endDate            DateTime
  deliberationsStart DateTime?
  deliberationsEnd   DateTime?
  location           String
  dresscode          String?
  maxCandidates      Int?
  currentCandidates  Int                   @default(0)
  status             InterviewStatus       @default(UPCOMING)
  cycleId            String
  createdBy          String
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  actionItems        InterviewActionItem[]
  assignments        InterviewAssignment[]
  evaluations        InterviewEvaluation[]
  firstRoundEvaluations FirstRoundInterviewEvaluation[]
  creator            User                  @relation("InterviewCreator", fields: [createdBy], references: [id])
  cycle              RecruitingCycle       @relation(fields: [cycleId], references: [id])

  @@map("interviews")
}

model InterviewAssignment {
  id          String          @id @default(uuid())
  interviewId String
  userId      String
  role        InterviewerRole
  assignedAt  DateTime        @default(now())
  notes       String?
  interview   Interview       @relation(fields: [interviewId], references: [id])
  user        User            @relation("InterviewAssignment", fields: [userId], references: [id])

  @@unique([interviewId, userId])
  @@map("interview_assignments")
}

model InterviewActionItem {
  id              String    @id @default(uuid())
  interviewId     String
  title           String
  description     String?
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  completedBy     String?
  order           Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedByUser User?     @relation("InterviewActionItemCompletion", fields: [completedBy], references: [id])
  interview       Interview @relation(fields: [interviewId], references: [id])

  @@map("interview_action_items")
}

model InterviewEvaluation {
  id            String                 @id @default(uuid())
  interviewId   String
  applicationId String
  evaluatorId   String
  notes         String?
  decision      InterviewDecision?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  application   Application            @relation(fields: [applicationId], references: [id])
  evaluator     User                   @relation("InterviewEvaluator", fields: [evaluatorId], references: [id])
  interview     Interview              @relation(fields: [interviewId], references: [id])
  rubricScores  InterviewRubricScore[]

  @@unique([interviewId, applicationId, evaluatorId])
  @@map("interview_evaluations")
}

// First round interview evaluation model
model FirstRoundInterviewEvaluation {
  id            String            @id @default(uuid())
  interviewId   String
  applicationId String
  evaluatorId   String
  decision      InterviewDecision?
  
  // Behavioral Rubric Scores (1-5 each)
  behavioralLeadership     Int?
  behavioralProblemSolving Int?
  behavioralInterest       Int?
  behavioralTotal          Int? // Sum of the above three (1-15)
  
  // Market Sizing Rubric Scores (1-5 each)
  marketSizingTeamwork     Int?
  marketSizingLogic        Int?
  marketSizingCreativity   Int?
  marketSizingTotal        Int? // Sum of the above three (1-15)
  
  // Notes sections
  behavioralNotes          String?
  marketSizingNotes        String?
  additionalNotes          String?
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  // Relations
  interview     Interview         @relation(fields: [interviewId], references: [id])
  application   Application       @relation(fields: [applicationId], references: [id])
  evaluator     User              @relation("FirstRoundEvaluator", fields: [evaluatorId], references: [id])
  
  @@unique([interviewId, applicationId, evaluatorId])
  @@map("first_round_interview_evaluations")
}

model InterviewRubricScore {
  id           String              @id @default(uuid())
  evaluationId String
  category     String
  score        Int
  comments     String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  evaluation   InterviewEvaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  @@unique([evaluationId, category])
  @@map("interview_rubric_scores")
}

enum UserRole {
  USER
  ADMIN
  MEMBER
}

enum ApplicationStatus {
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  WAITLISTED
}

enum InterviewType {
  COFFEE_CHAT
  ROUND_ONE
  ROUND_TWO
  FINAL_ROUND
  DELIBERATIONS
}

enum InterviewStatus {
  DRAFT
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum InterviewerRole {
  LEAD_INTERVIEWER
  INTERVIEWER
  OBSERVER
  DELIBERATOR
}

enum InterviewDecision {
  YES
  MAYBE_YES
  UNSURE
  MAYBE_NO
  NO
}

model FlaggedDocument {
  id            String   @id @default(uuid())
  applicationId String
  documentType  String   // 'resume', 'coverLetter', 'video'
  flaggedBy     String
  reason        String
  message       String?
  isResolved    Boolean  @default(false)
  resolvedBy    String?
  resolvedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  application   Application @relation(fields: [applicationId], references: [id])
  flagger       User        @relation("DocumentFlagger", fields: [flaggedBy], references: [id])
  resolver      User?       @relation("DocumentResolver", fields: [resolvedBy], references: [id])

  @@map("flagged_documents")
}

// Meeting slots for members to host 1:2 meetings (capacity defaults to 2)
model MeetingSlot {
  id        String          @id @default(uuid())
  memberId  String
  location  String
  startTime DateTime
  endTime   DateTime?
  capacity  Int             @default(2)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  member    User            @relation(fields: [memberId], references: [id])
  signups   MeetingSignup[]

  @@map("meeting_slots")
}

// Public signups for meeting slots; not all signups are existing users/candidates
model MeetingSignup {
  id        String      @id @default(uuid())
  slotId    String
  fullName  String
  email     String
  studentId String?
  attended  Boolean     @default(false)
  createdAt DateTime    @default(now())
  slot      MeetingSlot @relation(fields: [slotId], references: [id])

  @@unique([slotId, email])
  @@map("meeting_signups")
}
