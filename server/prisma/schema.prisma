generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  password           String
  fullName           String
  graduationClass    String?
  role               UserRole            @default(USER)
  createdAt          DateTime            @default(now())
  resetToken         String?
  resetTokenExpiry   DateTime?
  profileImage       String?
  studentId          Int?
  comments           Comment[]
  coverLetterScores  CoverLetterScore[]
  evaluations        Evaluation[]
  memberOneGroups    Groups[]            @relation("GroupMemberOne")
  memberThreeGroups  Groups[]            @relation("GroupMemberThree")
  memberTwoGroups    Groups[]            @relation("GroupMemberTwo")
  interviewResources InterviewResource[]
  resumeScores       ResumeScore[]
  videoScores        VideoScore[]

  @@map("users")
}

model Candidate {
  id                String             @id @default(uuid())
  studentId         Int                @unique
  firstName         String
  lastName          String
  email             String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  assignedGroupId   String?
  applications      Application[]
  assignedGroup     Groups?            @relation(fields: [assignedGroupId], references: [id])
  coffeeChat        CoffeeChat[]
  coverLetterScores CoverLetterScore[]
  eventAttendance   EventAttendance[]
  eventRsvp         EventRsvp[]
  referrals         Referral[]
  resumeScores      ResumeScore[]
  roundOne          RoundOne[]
  roundTwo          RoundTwo[]
  videoScores       VideoScore[]

  @@map("candidates")
}

model Application {
  id                String            @id @default(uuid())
  status            ApplicationStatus @default(SUBMITTED)
  responseID        String            @unique
  submittedAt       DateTime          @default(now())
  email             String
  firstName         String
  lastName          String
  studentId         String
  phoneNumber       String
  graduationYear    String
  isTransferStudent Boolean
  priorCollegeYears String?
  cumulativeGpa     Decimal           @db.Decimal(3, 2)
  majorGpa          Decimal           @db.Decimal(3, 2)
  major1            String
  major2            String?
  gender            String?
  isFirstGeneration Boolean
  resumeUrl         String
  blindResumeUrl    String?
  headshotUrl       String
  coverLetterUrl    String?
  videoUrl          String?
  rawResponses      Json
  approved          Boolean?
  currentRound      String?
  cycleId           String?
  candidateId       String?
  candidate         Candidate?        @relation(fields: [candidateId], references: [id])
  cycle             RecruitingCycle?  @relation(fields: [cycleId], references: [id])
  comments          Comment[]

  @@map("applications")
}

model RecruitingCycle {
  id           String        @id @default(uuid())
  name         String
  isActive     Boolean       @default(false)
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime      @default(now())
  formUrl      String?
  applications Application[]
  events       Events[]
  groups       Groups[]

  @@map("recruiting_cycles")
}

model Comment {
  id            String      @id @default(uuid())
  applicationId String
  userId        String
  content       String
  createdAt     DateTime    @default(now())
  application   Application @relation(fields: [applicationId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Grade {
  id           String   @id @default(uuid())
  resume       String?
  video        String?
  createdAt    DateTime @default(now())
  cover_letter String?
  applicant    String?
  user         String?

  @@map("grades")
}

model Evaluation {
  id           String      @id @default(uuid())
  notes        String?
  score        Int
  evaluatorId  String
  createdAt    DateTime    @default(now())
  coffeeChatId String?
  roundOneId   String?
  roundTwoId   String?
  coffeeChat   CoffeeChat? @relation(fields: [coffeeChatId], references: [id])
  evaluator    User        @relation(fields: [evaluatorId], references: [id])
  roundOne     RoundOne?   @relation(fields: [roundOneId], references: [id])
  roundTwo     RoundTwo?   @relation(fields: [roundTwoId], references: [id])

  @@map("evaluations")
}

model Groups {
  id                 String             @id @default(uuid())
  memberOne          String?
  memberTwo          String?
  memberThree        String?
  avgScore           Decimal?           @db.Decimal(5, 2)
  cycleId            String
  createdAt          DateTime           @default(now())
  assignedCandidates Candidate[]
  coverLetterScores  CoverLetterScore[]
  cycle              RecruitingCycle    @relation(fields: [cycleId], references: [id])
  memberOneUser      User?              @relation("GroupMemberOne", fields: [memberOne], references: [id])
  memberThreeUser    User?              @relation("GroupMemberThree", fields: [memberThree], references: [id])
  memberTwoUser      User?              @relation("GroupMemberTwo", fields: [memberTwo], references: [id])
  resumeScores       ResumeScore[]
  videoScores        VideoScore[]

  @@map("groups")
}

model ResumeScore {
  id              String    @id @default(uuid())
  overallScore    Decimal   @db.Decimal(5, 2)
  scoreOne        Int?
  scoreTwo        Int?
  scoreThree      Int?
  notesOne        String?
  notesTwo        String?
  notesThree      String?
  adminScore      Decimal?  @db.Decimal(5, 2)
  adminNotes      String?
  status          String?
  candidateId     String
  evaluatorId     String?
  assignedGroupId String?
  createdAt       DateTime  @default(now())
  assignedGroup   Groups?   @relation(fields: [assignedGroupId], references: [id])
  candidate       Candidate @relation(fields: [candidateId], references: [id])
  evaluator       User?     @relation(fields: [evaluatorId], references: [id])

  @@map("resume_scores")
}

model CoverLetterScore {
  id              String    @id @default(uuid())
  overallScore    Decimal   @db.Decimal(5, 2)
  scoreOne        Int?
  scoreTwo        Int?
  scoreThree      Int?
  notesOne        String?
  notesTwo        String?
  notesThree      String?
  adminScore      Decimal?  @db.Decimal(5, 2)
  adminNotes      String?
  status          String?
  candidateId     String
  evaluatorId     String?
  assignedGroupId String?
  createdAt       DateTime  @default(now())
  assignedGroup   Groups?   @relation(fields: [assignedGroupId], references: [id])
  candidate       Candidate @relation(fields: [candidateId], references: [id])
  evaluator       User?     @relation(fields: [evaluatorId], references: [id])

  @@map("cover_letter_scores")
}

model VideoScore {
  id              String    @id @default(uuid())
  overallScore    Decimal   @db.Decimal(5, 2)
  scoreOne        Int?
  scoreTwo        Int?
  scoreThree      Int?
  notesOne        String?
  notesTwo        String?
  notesThree      String?
  adminScore      Decimal?  @db.Decimal(5, 2)
  adminNotes      String?
  status          String?
  candidateId     String
  evaluatorId     String?
  assignedGroupId String?
  createdAt       DateTime  @default(now())
  assignedGroup   Groups?   @relation(fields: [assignedGroupId], references: [id])
  candidate       Candidate @relation(fields: [candidateId], references: [id])
  evaluator       User?     @relation(fields: [evaluatorId], references: [id])

  @@map("video_scores")
}

model Events {
  id               String            @id @default(uuid())
  eventName        String
  eventStartDate   DateTime
  eventEndDate     DateTime
  eventLocation    String?
  rsvpForm         String?
  attendanceForm   String?
  cycleId          String
  createdAt        DateTime          @default(now())
  memberRsvpUrl    String?
  showToCandidates Boolean           @default(false)
  eventAttendance  EventAttendance[]
  eventRsvp        EventRsvp[]
  cycle            RecruitingCycle   @relation(fields: [cycleId], references: [id])

  @@map("events")
}

model EventRsvp {
  id          String    @id @default(uuid())
  responseId  String    @unique
  eventId     String
  candidateId String
  createdAt   DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  event       Events    @relation(fields: [eventId], references: [id])

  @@map("event_rsvp")
}

model EventAttendance {
  id          String    @id @default(uuid())
  responseId  String    @unique
  eventId     String
  candidateId String
  createdAt   DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  event       Events    @relation(fields: [eventId], references: [id])

  @@map("event_attendance")
}

model CoffeeChat {
  id           String       @id @default(uuid())
  mentorName   String
  scheduledAt  DateTime
  completed    Boolean      @default(false)
  overallScore Decimal?     @db.Decimal(5, 2)
  candidateId  String
  createdAt    DateTime     @default(now())
  candidate    Candidate    @relation(fields: [candidateId], references: [id])
  evaluations  Evaluation[]

  @@map("coffee_chat")
}

model RoundOne {
  id           String       @id @default(uuid())
  status       String
  feedback     String?
  overallScore Decimal?     @db.Decimal(5, 2)
  candidateId  String
  createdAt    DateTime     @default(now())
  evaluations  Evaluation[]
  candidate    Candidate    @relation(fields: [candidateId], references: [id])

  @@map("round_one")
}

model RoundTwo {
  id           String       @id @default(uuid())
  status       String
  feedback     String?
  overallScore Decimal?     @db.Decimal(5, 2)
  candidateId  String
  createdAt    DateTime     @default(now())
  evaluations  Evaluation[]
  candidate    Candidate    @relation(fields: [candidateId], references: [id])

  @@map("round_two")
}

model Referral {
  id           String    @id @default(uuid())
  referrerName String
  relationship String
  candidateId  String
  createdAt    DateTime  @default(now())
  candidate    Candidate @relation(fields: [candidateId], references: [id])

  @@map("referrals")
}

model InterviewResource {
  id              String   @id @default(uuid())
  title           String
  description     String?
  url             String?
  fileUrl         String?
  type            String?
  category        String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String
  hasExternalLink Boolean  @default(true)
  icon            String   @default("book")
  order           Int      @default(0)
  round           String
  user            User     @relation(fields: [createdBy], references: [id])

  @@map("interview_resources")
}

enum UserRole {
  USER
  ADMIN
  MEMBER
}

enum ApplicationStatus {
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  WAITLISTED
}
